# Form implementation generated from reading ui file 'simplegui.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets, uic
from PyQt6.QtCore import QThread, pyqtSignal, QObject
from PyQt6.QtWebEngineWidgets import QWebEngineView
import os
import pandas as pd
# import mainpackage as main


current_file_path = os.path.abspath(__file__)
current_dir = os.path.dirname(current_file_path)
stocks_file_path = os.path.join(current_dir, 'stocks.txt')
listing_file_path = os.path.join(current_dir, 'listing_status.csv')
# with open(stocks_file_path,'r') as stocks:
#     stockslist = []
#     for stock in stocks:
#         stock = stock.strip()
#         stockslist.append(stock)

# cryptolist = []

# with open(listing_file_path,'r') as listing:
#     statuses = pd.read_csv(listing).set_index('symbol')



class Ui_MainWindow(object):
    # def __init__(self,stocklist,coinlist):
    #     self.current_symbol = None
    #     self.checked = False
    #     self.mode = 'Stocks'
    #     self.currency = 'USD'
    #     self.stocks = stocklist
    #     self.coins = coinlist
    #     self.candle_widget = QWebEngineView()
    #     self.df_widget = QtWidgets.QWidget()
    #     self.balance_sheet_widget = QWebEngineView()
    #     self.cash_flow_widget = QWebEngineView()
    #     self.income_statement_widget = QWebEngineView()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(994, 669)
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        MainWindow.setFont(font)
        self.MainWidget = QtWidgets.QWidget(parent=MainWindow)
        self.MainWidget.setObjectName("MainWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.MainWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.MainLayout = QtWidgets.QFrame(parent=self.MainWidget)
        self.MainLayout.setObjectName("MainLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.MainLayout)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.ListingsArea = QtWidgets.QVBoxLayout()
        self.ListingsArea.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetMaximumSize)
        self.ListingsArea.setContentsMargins(15, 15, 15, 15)
        self.ListingsArea.setSpacing(10)
        self.ListingsArea.setObjectName("ListingsArea")
        self.SwitchandCurrency = QtWidgets.QHBoxLayout()
        self.SwitchandCurrency.setObjectName("SwitchandCurrency")
        self.Stocks = QtWidgets.QLabel(parent=self.MainLayout)
        self.Stocks.setObjectName("Stocks")
        self.SwitchandCurrency.addWidget(self.Stocks)
        self.Switch = QtWidgets.QCheckBox(parent=self.MainLayout)
        self.Switch.setText("")
        self.Switch.setObjectName("Switch")
        self.SwitchandCurrency.addWidget(self.Switch)
        self.Coins = QtWidgets.QLabel(parent=self.MainLayout)
        self.Coins.setObjectName("Coins")
        self.SwitchandCurrency.addWidget(self.Coins)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.SwitchandCurrency.addItem(spacerItem)
        self.currencyBox = QtWidgets.QComboBox(parent=self.MainLayout)
        self.currencyBox.setObjectName("comboBox")
        self.currencyBox.addItem("")
        self.currencyBox.addItem("")
        self.SwitchandCurrency.addWidget(self.currencyBox)
        self.SwitchandCurrency.setStretch(0, 2)
        self.SwitchandCurrency.setStretch(1, 1)
        self.SwitchandCurrency.setStretch(2, 2)
        self.SwitchandCurrency.setStretch(3, 7)
        self.SwitchandCurrency.setStretch(4, 1)
        self.ListingsArea.addLayout(self.SwitchandCurrency)
        self.SymbolandRefresh = QtWidgets.QHBoxLayout()
        self.SymbolandRefresh.setObjectName("SymbolandRefresh")
        self.SymbolText = QtWidgets.QLabel(parent=self.MainLayout)
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.SymbolText.setFont(font)
        self.SymbolText.setObjectName("SymbolText")
        self.SymbolandRefresh.addWidget(self.SymbolText)
        self.pushButton = QtWidgets.QPushButton(parent=self.MainLayout)
        self.pushButton.setObjectName("pushButton")
        self.SymbolandRefresh.addWidget(self.pushButton)
        self.SymbolandRefresh.setStretch(0, 4)
        self.SymbolandRefresh.setStretch(1, 1)
        self.ListingsArea.addLayout(self.SymbolandRefresh)
        self.Search = QtWidgets.QHBoxLayout()
        self.Search.setObjectName("Search")
        self.SearchBar = QtWidgets.QLineEdit(parent=self.MainLayout)
        self.SearchBar.setObjectName("SearchBar")
        self.Search.addWidget(self.SearchBar)
        self.AddSymbolButton = QtWidgets.QPushButton(parent=self.MainLayout)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.AddSymbolButton.sizePolicy().hasHeightForWidth())
        self.AddSymbolButton.setSizePolicy(sizePolicy)
        self.AddSymbolButton.setObjectName("AddSymbolButton")
        self.Search.addWidget(self.AddSymbolButton)
        self.Search.setStretch(0, 5)
        self.Search.setStretch(1, 1)
        self.ListingsArea.addLayout(self.Search)
        self.SymbolList = QtWidgets.QListWidget(parent=self.MainLayout)
        self.SymbolList.setObjectName("SymbolList")
        self.ListingsArea.addWidget(self.SymbolList)
        self.ListingsArea.setStretch(0, 1)
        self.ListingsArea.setStretch(1, 1)
        self.ListingsArea.setStretch(2, 1)
        self.ListingsArea.setStretch(3, 13)
        self.horizontalLayout.addLayout(self.ListingsArea)
        self.DisplayArea = QtWidgets.QVBoxLayout()
        self.DisplayArea.setContentsMargins(5, 5, 5, 5)
        self.DisplayArea.setSpacing(5)
        self.DisplayArea.setObjectName("DisplayArea")
        self.SymbolandPrice = QtWidgets.QHBoxLayout()
        self.SymbolandPrice.setContentsMargins(5, 5, 5, 5)
        self.SymbolandPrice.setObjectName("SymbolandPrice")
        self.SymandName = QtWidgets.QVBoxLayout()
        self.SymandName.setObjectName("SymandName")
        self.SymbolTitle = QtWidgets.QLabel(parent=self.MainLayout)
        font = QtGui.QFont()
        font.setFamily("Helvetica")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.SymbolTitle.setFont(font)
        self.SymbolTitle.setObjectName("SymbolTitle")
        self.SymandName.addWidget(self.SymbolTitle)
        self.FullName = QtWidgets.QLabel(parent=self.MainLayout)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.FullName.setFont(font)
        self.FullName.setObjectName("FullName")
        self.SymandName.addWidget(self.FullName)
        self.SymandName.setStretch(0, 2)
        self.SymbolandPrice.addLayout(self.SymandName)
        self.Prices = QtWidgets.QVBoxLayout()
        self.Prices.setObjectName("Prices")
        self.CurrentPrice = QtWidgets.QLabel(parent=self.MainLayout)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.CurrentPrice.setFont(font)
        self.CurrentPrice.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.CurrentPrice.setObjectName("CurrentPrice")
        self.Prices.addWidget(self.CurrentPrice)
        self.Change = QtWidgets.QLabel(parent=self.MainLayout)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Change.setFont(font)
        self.Change.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.Change.setObjectName("Change")
        self.Prices.addWidget(self.Change)
        self.Vol = QtWidgets.QLabel(parent=self.MainLayout)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Vol.setFont(font)
        self.Vol.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.Vol.setObjectName("Vol")
        self.Prices.addWidget(self.Vol)
        self.Prices.setStretch(0, 2)
        self.Prices.setStretch(1, 1)
        self.Prices.setStretch(2, 1)
        self.SymbolandPrice.addLayout(self.Prices)
        self.SymbolandPrice.setStretch(0, 2)
        self.SymbolandPrice.setStretch(1, 1)
        self.DisplayArea.addLayout(self.SymbolandPrice)
        self.Tabs = QtWidgets.QTabWidget(parent=self.MainLayout)
        self.Tabs.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.Tabs.setTabPosition(QtWidgets.QTabWidget.TabPosition.North)
        self.Tabs.setElideMode(QtCore.Qt.TextElideMode.ElideNone)
        self.Tabs.setObjectName("Tabs")
        self.Price = QtWidgets.QWidget()
        self.Price.setObjectName("Price")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.Price)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setContentsMargins(5, 5, 5, 5)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.graphLayout = QtWidgets.QVBoxLayout()
        self.graphLayout.setObjectName("graphLayout")
        

        self.verticalLayout_2.addLayout(self.graphLayout)
        self.PriceInfoArea = QtWidgets.QHBoxLayout()
        self.PriceInfoArea.setContentsMargins(1, 1, 1, 1)
        self.PriceInfoArea.setSpacing(3)
        self.PriceInfoArea.setObjectName("PriceInfoArea")
        self.OpenLabel = QtWidgets.QHBoxLayout()
        self.OpenLabel.setContentsMargins(5, 5, 5, 5)
        self.OpenLabel.setSpacing(6)
        self.OpenLabel.setObjectName("OpenLabel")
        self.OpenText = QtWidgets.QLabel(parent=self.Price)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.OpenText.setFont(font)
        self.OpenText.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.OpenText.setObjectName("OpenText")
        self.OpenLabel.addWidget(self.OpenText)
        self.OpenPrice = QtWidgets.QLabel(parent=self.Price)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.OpenPrice.setFont(font)
        self.OpenPrice.setObjectName("OpenPrice")
        self.OpenLabel.addWidget(self.OpenPrice)
        self.OpenLabel.setStretch(0, 10)
        self.OpenLabel.setStretch(1, 9)
        self.PriceInfoArea.addLayout(self.OpenLabel)
        self.HighLabel = QtWidgets.QHBoxLayout()
        self.HighLabel.setContentsMargins(5, 5, 5, 5)
        self.HighLabel.setObjectName("HighLabel")
        self.HighText = QtWidgets.QLabel(parent=self.Price)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.HighText.setFont(font)
        self.HighText.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.HighText.setObjectName("HighText")
        self.HighLabel.addWidget(self.HighText)
        self.HighPrice = QtWidgets.QLabel(parent=self.Price)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.HighPrice.setFont(font)
        self.HighPrice.setObjectName("HighPrice")
        self.HighLabel.addWidget(self.HighPrice)
        self.HighLabel.setStretch(0, 10)
        self.HighLabel.setStretch(1, 9)
        self.PriceInfoArea.addLayout(self.HighLabel)
        self.LowText_2 = QtWidgets.QHBoxLayout()
        self.LowText_2.setContentsMargins(5, 5, 5, 5)
        self.LowText_2.setObjectName("LowText_2")
        self.LowText = QtWidgets.QLabel(parent=self.Price)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.LowText.setFont(font)
        self.LowText.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.LowText.setObjectName("LowText")
        self.LowText_2.addWidget(self.LowText)
        self.LowPrice = QtWidgets.QLabel(parent=self.Price)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.LowPrice.setFont(font)
        self.LowPrice.setObjectName("LowPrice")
        self.LowText_2.addWidget(self.LowPrice)
        self.LowText_2.setStretch(0, 10)
        self.LowText_2.setStretch(1, 9)
        self.PriceInfoArea.addLayout(self.LowText_2)
        self.CloseText = QtWidgets.QHBoxLayout()
        self.CloseText.setContentsMargins(5, 5, 5, 5)
        self.CloseText.setObjectName("CloseText")
        self.PrevCloseText = QtWidgets.QLabel(parent=self.Price)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.PrevCloseText.setFont(font)
        self.PrevCloseText.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.PrevCloseText.setWordWrap(True)
        self.PrevCloseText.setObjectName("PrevCloseText")
        self.CloseText.addWidget(self.PrevCloseText)
        self.PrevClosePrice = QtWidgets.QLabel(parent=self.Price)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.PrevClosePrice.setFont(font)
        self.PrevClosePrice.setObjectName("PrevClosePrice")
        self.CloseText.addWidget(self.PrevClosePrice)
        self.CloseText.setStretch(0, 10)
        self.CloseText.setStretch(1, 6)
        self.PriceInfoArea.addLayout(self.CloseText)
        self.PriceInfoArea.setStretch(0, 1)
        self.PriceInfoArea.setStretch(1, 1)
        self.PriceInfoArea.setStretch(2, 1)
        self.PriceInfoArea.setStretch(3, 1)
        self.verticalLayout_2.addLayout(self.PriceInfoArea)
        self.verticalLayout_2.setStretch(0, 11)
        self.verticalLayout_2.setStretch(1, 1)
        self.gridLayout_2.addLayout(self.verticalLayout_2, 0, 0, 1, 1)
        self.Tabs.addTab(self.Price, "")
        self.News = QtWidgets.QWidget()
        self.News.setObjectName("News")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.News)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.listWidget = QtWidgets.QListWidget(parent=self.News)
        self.listWidget.setObjectName("listWidget")
        self.gridLayout_3.addWidget(self.listWidget, 0, 0, 1, 1)
        self.Tabs.addTab(self.News, "")
        self.Spatial = QtWidgets.QWidget()
        self.Spatial.setObjectName("Spatial")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.Spatial)
        self.gridLayout_4.setContentsMargins(2, 2, 2, 2)
        self.gridLayout_4.setHorizontalSpacing(2)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.SpatialFrame = QtWidgets.QFrame(parent=self.Spatial)
        self.SpatialFrame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.SpatialFrame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.SpatialFrame.setObjectName("SpatialFrame")
        self.gridLayout_4.addWidget(self.SpatialFrame, 0, 0, 1, 1)
        self.Tabs.addTab(self.Spatial, "")
        self.Overview = QtWidgets.QWidget()
        self.Overview.setObjectName("Overview")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.Overview)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.scrollArea = QtWidgets.QScrollArea(parent=self.Overview)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 697, 2018))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout_7.setObjectName("gridLayout_7")

        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayout_7.addLayout(self.verticalLayout, 0, 0, 1, 1)
        

        # self.frame = QtWidgets.QFrame(parent=self.scrollAreaWidgetContents)
        # self.frame.setMinimumSize(QtCore.QSize(0, 2000))
        # self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        # self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        # self.frame.setObjectName("frame")

        # self.gridLayout_10 = QtWidgets.QGridLayout(self.frame)
        # self.gridLayout_10.setContentsMargins(0, 0, 0, 0)
        # self.gridLayout_10.setObjectName("gridLayout_10")
        # self.gridLayout_9 = QtWidgets.QGridLayout()
        # self.gridLayout_9.setObjectName("gridLayout_9")
        # self.gridLayout_10.addLayout(self.gridLayout_9, 0, 0, 1, 1)
        # self.gridLayout_7.addWidget(self.frame, 0, 0, 1, 1)
        
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout_5.addWidget(self.scrollArea, 0, 0, 1, 1)
        
        self.Tabs.addTab(self.Overview, "")
        self.IncomeStatement = QtWidgets.QWidget()
        self.IncomeStatement.setObjectName("IncomeStatement")
        self.Tabs.addTab(self.IncomeStatement, "")
        self.BalanceSheet = QtWidgets.QWidget()
        self.BalanceSheet.setObjectName("BalanceSheet")
        self.Tabs.addTab(self.BalanceSheet, "")
        self.CashFlow = QtWidgets.QWidget()
        self.CashFlow.setObjectName("CashFlow")
        self.Tabs.addTab(self.CashFlow, "")
        self.DisplayArea.addWidget(self.Tabs)
        self.DisplayArea.setStretch(0, 1)
        self.DisplayArea.setStretch(1, 6)
        self.horizontalLayout.addLayout(self.DisplayArea)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 3)
        self.gridLayout.addWidget(self.MainLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.MainWidget)

        self.retranslateUi(MainWindow)
        self.Tabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        #----------------------------------------------------------------
    #     self.Switch.stateChanged.connect(self.check_box_state_changed)
    #     self.currencyBox.currentIndexChanged.connect(self.combo_box_index_changed)
    #     self.AddSymbolButton.clicked.connect(self.add_button_clicked)
        
    #     for stock in self.stocks:
    #         item = QtWidgets.QListWidgetItem(stock)
    #         self.SymbolList.addItem(item)
        
    #     self.SymbolList.itemClicked.connect(self.symbol_clicked)
    #     self.currencyBox.setDisabled(True)
    #     self.candle_widget.setParent(self.Price)
    #     self.graphLayout.addWidget(self.candle_widget)

    #     self.balance_sheet_layout = QtWidgets.QVBoxLayout(self.BalanceSheet)
    #     self.balance_sheet_layout.addWidget(self.balance_sheet_widget)

    #     self.income_statement_layout = QtWidgets.QVBoxLayout(self.IncomeStatement)
    #     self.income_statement_layout.addWidget(self.income_statement_widget)

    #     self.cash_flow_layout = QtWidgets.QVBoxLayout(self.CashFlow)
    #     self.cash_flow_layout.addWidget(self.cash_flow_widget)

    #     self.Tabs.tabBarClicked.connect(self.tab_clicked)

    #     self.pushButton.setDisabled(True)

    # def check_box_state_changed(self):
    #     # Get the state of the checkbox and print it
    #     self.checked = self.Switch.isChecked()
    #     self.setMode()
    
    # def setMode(self):
    #     if self.checked == True:
    #         self.mode = 'Crypto'
    #         self.Coins.setText('Crypto')
    #         self.Stocks.setText('     ')
    #         self.SymbolList.clear()
    #         self.SymbolList.addItems(cryptolist)
    #     else:
    #         self.mode = 'Stocks'
    #         self.Coins.setText('     ')
    #         self.Stocks.setText('Stocks')
    #         self.SymbolList.clear()
    #         self.SymbolList.addItems(stockslist)
    
    # def combo_box_index_changed(self):
    #     self.currency = self.currencyBox.currentText()
    #     print(self.currency)
    
    # def add_button_clicked(self):
        
    #     searchsymbol = self.SearchBar.text()


    #     if self.mode == 'Stocks':
    #         if searchsymbol in statuses.index and searchsymbol not in stockslist:
    #             with open(stocks_file_path,'a') as f:
    #                 f.write(searchsymbol + '\n')
    #                 f.close()
    #             item = QtWidgets.QListWidgetItem(searchsymbol)
    #             name = statuses.loc[searchsymbol, 'name']
    #             stockslist.append(searchsymbol)
    #             self.SymbolList.addItem(item)
    #     elif self.mode == 'Crypto' and searchsymbol not in cryptolist:
    #         pass

    # def update_current_title(self,symbol,df):
    #     name = statuses.loc[symbol, 'name']
    #     exchange = statuses.loc[symbol, 'exchange']
    #     fullname = name+' | '+exchange
    #     self.SymbolTitle.setText(symbol)
    #     self.FullName.setText(fullname)
    #     self.CurrentPrice.setText(df['Price'][0])
    #     changetext = '{}({})'.format(df['Change'][0],df['Change Percent'][0])
    #     self.Change.setText(changetext)
    #     self.Vol.setText('Vol. ' + df['Volume'][0])
    #     self.OpenPrice.setText(df['Open'][0])
    #     self.HighPrice.setText(df['High'][0])
    #     self.LowPrice.setText(df['Low'][0])
    #     self.PrevClosePrice.setText(df['Previous Close'][0])
        

    # def symbol_clicked(self):
    #     current = self.SymbolList.currentItem().text()overview
    #     self.candle_widget.setHtml('')
    #     self.current_symbol = current

    #     self.quote_thread = LoadQuoteThread(current)
    #     self.graph_thread = PlottingThread(current)
    #     self.overview_thread = OverviewThread(current)
    #     self.balancesheet_thread = PlotBalanceSheetThread(current)
    #     self.incomestatement_thread = PlotIncomeStatementThread(current)
    #     self.cashflow_thread = PlotCashFlowThread(current)

    #     self.quote_thread.finished.connect(self.handle_load_quote_thread_finished)
    #     self.graph_thread.finished.connect(self.update_graph)
    #     self.overview_thread.finished.connect(self.handle_load_overview_finished)
    #     self.balancesheet_thread.finished.connect(self.handle_load_balance_sheet_finished)
    #     self.cashflow_thread.finished.connect(self.handle_load_cash_flow_finished)
    #     self.incomestatement_thread.finished.connect(self.handle_load_income_statement_finished)

    #     self.graph_thread.start()
    #     self.quote_thread.start()
    #     self.overview_thread.start()
    #     self.balancesheet_thread.start()
    #     self.cashflow_thread.start()
    #     self.incomestatement_thread.start()

    # def handle_load_quote_thread_finished(self, df):
    #     # Update the UI with the results from the worker thread
    #     self.update_current_title(self.quote_thread.symbol, df)

    # def update_graph(self, html):
    #     self.candle_widget.setHtml(html)

    # def set_overview(self, df):
    #     self.verticalLayout.removeWidget(self.df_widget)
    #     self.df_widget = DataFrameWidget(df)
    #     self.df_widget.setMaximumWidth(700)
    #     self.verticalLayout.addWidget(self.df_widget)
    # def handle_load_overview_finished(self, df):
    #     self.set_overview(df)

    # def tab_clicked(self, index):
    #     print("Tab clicked:", self.Tabs.tabText(index))
        
    # def handle_load_balance_sheet_finished(self, html):
    #     self.balance_sheet_widget.setHtml(html)

    # def handle_load_income_statement_finished(self, html):
    #     self.income_statement_widget.setHtml(html)

    # def handle_load_cash_flow_finished(self, html):
    #     self.cash_flow_widget.setHtml(html)

    def retranslateUi(self, MainWindow):
        boldfont = QtGui.QFont()
        boldfont.setBold(True)
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Stocks.setText(_translate("MainWindow", "Stocks"))
        self.currencyBox.setItemText(0, _translate("MainWindow", "USD"))
        self.currencyBox.setItemText(1, _translate("MainWindow", "THB"))
        self.SymbolText.setText(_translate("MainWindow", "Symbols"))
        self.pushButton.setText(_translate("MainWindow", "Refresh"))
        self.AddSymbolButton.setText(_translate("MainWindow", "Add"))
        self.OpenText.setText(_translate("MainWindow", "Open"))
        self.OpenText.setFont(boldfont)
        self.HighText.setText(_translate("MainWindow", "High"))
        self.HighText.setFont(boldfont)
        self.LowText.setText(_translate("MainWindow", "Low"))
        self.LowText.setFont(boldfont)
        self.PrevCloseText.setText(_translate("MainWindow", "Previous Close"))
        self.PrevCloseText.setFont(boldfont)
        self.Tabs.setTabText(self.Tabs.indexOf(self.Price), _translate("MainWindow", "Price"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.News), _translate("MainWindow", "News"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Spatial), _translate("MainWindow", "Spatial"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.Overview), _translate("MainWindow", "Overview"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.IncomeStatement), _translate("MainWindow", "Income Statement"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.BalanceSheet), _translate("MainWindow", "Balance Sheet"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.CashFlow), _translate("MainWindow", "Cash Flow"))

class LoadQuoteThread(QThread):
    finished = pyqtSignal(pd.DataFrame)

    def __init__(self, symbol):
        super().__init__()
        self.symbol = symbol

    def run(self):
        # Call the slow function in the worker thread
        df = main.load_quote(self.symbol).astype(str)
        self.finished.emit(df)

class PlottingThread(QThread):
    finished = pyqtSignal(str)

    def __init__(self, symbol) :
        super().__init__()
        self.symbol = symbol
    
    def run(self):
        html = main.plot_html(self.symbol)
        self.finished.emit(html)

class OverviewThread(QThread):
    finished = pyqtSignal(pd.DataFrame)

    def __init__(self, symbol) :
        super().__init__()
        self.symbol = symbol
    
    def run(self):
        overview = main.load_overview(self.symbol)
        if type(overview) == pd.DataFrame:
            pass
        else:
            overview = pd.DataFrame(columns=['No Overview'])
        self.finished.emit(overview)
        

class PlotBalanceSheetThread(QThread):
    finished = pyqtSignal(str)

    def __init__(self, symbol) :
        super().__init__()
        self.symbol = symbol
    
    def run(self):
        html = main.plot_bs_html(self.symbol)
        self.finished.emit(html)
class PlotIncomeStatementThread(QThread):
    finished = pyqtSignal(str)

    def __init__(self, symbol) :
        super().__init__()
        self.symbol = symbol
    
    def run(self):
        html = main.plot_is_html(self.symbol)
        self.finished.emit(html)

class PlotCashFlowThread(QThread):
    finished = pyqtSignal(str)

    def __init__(self, symbol) :
        super().__init__()
        self.symbol = symbol
    
    def run(self):
        html = main.plot_cf_html(self.symbol)
        self.finished.emit(html)


class DataFrameWidget(QtWidgets.QWidget):
    def __init__(self, dataframe):
        super().__init__()
        self.df = dataframe

        # set up the font for bold and normal text
        self.bold_font = QtGui.QFont()
        self.bold_font.setBold(True)
        self.bold_font.setPointSize(24)

        self.normal_font = QtGui.QFont()
        self.normal_font.setPointSize(19)

        # create a layout for the widget
        self.layout = QtWidgets.QVBoxLayout(self)

        # iterate through the columns of the dataframe
        for column in self.df.columns:
            # add the column name as a QLabel with bold font
            label_column = QtWidgets.QLabel(column)
            label_column.setFont(self.bold_font)
            self.layout.addWidget(label_column)

            # add the column values as a QLabel with normal font
            values = list(self.df[column])
            for value in values:
                label_value = QtWidgets.QLabel(str(value))
                label_value.setFont(self.normal_font)
                label_value.setWordWrap(True)
                self.layout.addWidget(label_value)




# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow(stockslist,None)
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec())
